{"version":3,"sources":["containers/Navbar.js","components/searchButtonPerPatient.js","components/InformationOfThePatient.js","components/DoctorAvailability.js","components/AppointmentInformation.js","services/createMedicalAppointmentService.js","services/getAppointmentWithConditionsService.js","containers/ModalAndButton.js","components/DoctorsScheduleTable.js","components/BackgroundImage.js","services/getPatientByIdService.js","services/getDoctorsSchedulePerHourService.js","containers/ScheduleMedicalAppointment.js","services/getDoctorsService.js","components/DoctorInformation.js","components/DoctorsDropdown.js","components/DoctorAppointmentsTable.js","services/getDoctorByIDService.js","services/getAppointmentsByDoctorIDService.js","containers/MedicalSchedulePerDoctor.js","utils/userValidations.js","services/createPatientService.js","containers/registerPatient.js","App.js","serviceWorker.js","index.js","img/appointment.svg","img/medicalAppointmentImage.jpg"],"names":["Navbar","props","state","menu","toggleMenu","bind","this","setState","show","className","src","MedicineIcon","alt","href","type","onClick","Component","SearchButtonPerPatient","patientId","handleSubmitPatientId","onChangeInputPatientId","handleOnKeyPressEnterPatientId","placeholder","onChange","value","onKeyPress","InformationOfThePatient","info","htmlFor","readOnly","id","name","lastname","DoctorAvailability","doctorAvailable","showLabel","AppointmentInformation","patientInfo","patientID","doctorInfo","shiftStart","uniqueID","Math","random","toString","substr","createMedicalAppointmentService","appointmentTime","doctorId","axios","post","Date","Time","duration","then","resp","console","log","data","Promise","resolve","catch","error","reject","getAppointmentWithConditionsService","doctorID","AppointmentDate","AppointmentTime","get","ModalAndButton","modalShow","appointmentDate","showCreateAppointment","handleShow","handleClose","handleSubmitCreateAppointment","a","async","doctorScheduleByRow","showMessage","NotificationManager","getDifferenceInDaysBetweenTodayAndAppointmentDate","appointmentDateParam","today","newAppointmentDateParamWithSpaces","replace","Difference_In_Time","getTime","ceil","onChangeDate","evt","target","checkDoctorAvailability","Swal","fire","icon","title","showConfirmButton","timer","Difference_In_Days","isNaN","length","variant","Modal","onHide","Header","closeButton","Title","Body","defaultValue","Footer","disabled","DoctorsScheduleTable","doctorSchedule","SearchBar","Search","columns","dataField","text","sort","formatter","rowContent","row","rowIndex","defaultSorted","order","keyField","search","customMatchFunc","searchText","startsWith","searchProps","bootstrap4","baseProps","classes","pagination","paginationFactory","BackgroundImage","logo","getPatientByIdService","getDoctorsSchedulePerHourService","ScheduleMedicalAppointment","infoPatient","showInformation","doctorSchedulePerHour","fetchInfoPatientAndDoctorSchedulePerHour","setAttributesForDataTable","forEach","element","index","specialty","doctor","charCode","getDoctorsService","DoctorInformation","doctorLastname","DoctorsDropdown","doctors","handleOnChangeSelect","key","map","fullName","DoctorAppointmentsTable","doctorAppointments","getDoctorByIDService","getAppointmentsByDoctorIDService","medicalAppointments","MedicalSchedulePerDoctor","showDoctorInformation","fetchDoctors","fetchDoctorData","doctorAppointmentsUpdate","validations","regexs","IDNumber","ageNumber","string","ID","age","Number","RegisterPatient","handleSubmitCreatePatient","validateRequiredInput","isEmpty","isPatientExist","createPatientService","success","cleanInput","handleOnClose","errors","handleOnChangePatientInfo","e","validateIDNumber","test","validateNameString","validateLastnameString","validateAgeNumber","myRef","React","createRef","current","focus","ref","max","min","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.3f0d3062.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport MedicineIcon from './../img/appointment.svg'\r\nimport './css/navbar.css'\r\n\r\nexport default class Navbar extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      menu: false\r\n    };\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n  }\r\n\r\n  toggleMenu(){\r\n    this.setState({ menu: !this.state.menu })\r\n  }\r\n\r\n  render() {\r\n\r\n  const show = (this.state.menu) ? \"show\" : \"\" ;\r\n\r\n  return (\r\n\r\n    <nav className=\"navbar navbar-expand-md bg-dark navbar-dark\">\r\n      <img className=\"imgCustomize\" src={MedicineIcon} alt=\"Medicine Icon\" />\r\n      <a className=\"navbar-brand\" href=\"/\">Appointments</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" onClick={ this.toggleMenu }>\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className={\"collapse navbar-collapse navbarCustomize \" + show}>\r\n        <div className=\"navbar-nav\">\r\n          <a className=\"nav-item nav-link \" href=\"/doctors\" >Doctors</a>\r\n        </div>\r\n      </div>\r\n      <div className={\"collapse navbar-collapse navbarCustomize \" + show}>\r\n        <div className=\"navbar-nav\">\r\n          <a className=\"nav-item nav-link \" href=\"/patients\" >Patients</a>\r\n        </div>\r\n      </div>\r\n\r\n    </nav>\r\n  );\r\n  }\r\n}","import React from \"react\";\r\nimport './css/searchButton.css'\r\n\r\nconst SearchButtonPerPatient = (props) => {\r\n  const { patientId, \r\n    handleSubmitPatientId, \r\n    onChangeInputPatientId,\r\n    handleOnKeyPressEnterPatientId } = props\r\n  return (\r\n    <div className=\"container mt-2\">\r\n      <label>Enter patient's ID:</label>\r\n      <div className=\"input-group mx-auto \">\r\n        <input type=\"text\" \r\n          className=\"form-control\" \r\n          placeholder=\"Search for...\" \r\n          onChange = {onChangeInputPatientId}\r\n          value = {patientId || ''}\r\n          onKeyPress = {handleOnKeyPressEnterPatientId} />\r\n            <span className=\"input-group-btn\">\r\n              <button className=\"btn btn-search\" type=\"button\" onClick={handleSubmitPatientId} > Search</button>\r\n            </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchButtonPerPatient ;","import React from \"react\";\r\n\r\nconst InformationOfThePatient = (props) => {\r\n  const { info, show  } = props\r\n  return (\r\n    <div >\r\n      { show ?\r\n        <div className=\"container mt-2\" >\r\n         <p>Information of the patient:</p>\r\n          <div className=\"container border border-dark rounded \">\r\n            <form>\r\n              <div className=\"form-group row\">\r\n                <label htmlFor=\"staticName\" className=\"col-sm-2 col-form-label\">Name:</label>\r\n                <div className=\"col-sm-6\">\r\n                  <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticName\" value={info.name} />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group row\">\r\n                <label htmlFor=\"staticLastname\" className=\"col-sm-2 col-form-label\">Lastname:</label>\r\n                  <div className=\"col-sm-6\">\r\n                    <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticLastname\" value={info.lastname} />\r\n                  </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>: null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InformationOfThePatient;","import React from \"react\";\r\nimport './css/doctorAvailable.css'\r\n\r\nconst DoctorAvailability = (props) => {\r\n  const { doctorAvailable, showLabel  } = props\r\n  return (\r\n    <div className=\"container mt-2\">\r\n      { showLabel ? \r\n      doctorAvailable ? <p className=\"available\">AVAILABLE</p>: <p className=\"notAvailable\">NOT AVAILABLE</p>\r\n      : null\r\n    }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorAvailability  ;","import React from \"react\";\r\n\r\nconst AppointmentInformation = (props) => {\r\n  const { patientInfo, patientID, doctorInfo } = props\r\n  return (\r\n    <div >\r\n      <div className=\"container mt-2\" >\r\n        <p> Appointment's Information:</p>\r\n        <div className=\"container border border-dark rounded \">\r\n        <form>\r\n          <div className=\"form-group mb-0  row\">\r\n            <label htmlFor=\"staticPatientID\" className=\"col-sm-5 col-form-label\">Patient's ID</label>\r\n            <div className=\"col-sm-6\">\r\n              <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticPatientID\" value={patientID} />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group mb-0  row\">\r\n            <label htmlFor=\"staticPatientName\" className=\"col-sm-5 col-form-label\">Patient's name:</label>\r\n              <div className=\"col-sm-6\">\r\n                <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticPatientName\" value={patientInfo.name} />\r\n              </div>\r\n          </div>\r\n          <div className=\"form-group mb-0  row\">\r\n            <label htmlFor=\"staticPatientLastname\" className=\"col-sm-5 col-form-label\">Patient's lastname:</label>\r\n              <div className=\"col-sm-6\">\r\n                <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticPatientLastname\" value={patientInfo.lastname} />\r\n              </div>\r\n          </div>\r\n          <div className=\"form-group mb-0 row\">\r\n            <label htmlFor=\"staticDrLastname\" className=\"col-sm-5 col-form-label\">Dr.</label>\r\n              <div className=\"col-sm-6\">\r\n                <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticDrLastname\" value={doctorInfo.lastname} />\r\n              </div>\r\n          </div>\r\n          <div className=\"form-group mb-0  row\">\r\n            <label htmlFor=\"appointmentTime\" className=\"col-sm-5 col-form-label\">Appointment time:</label>\r\n              <div className=\"col-sm-6\">\r\n                <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"appointmentTime\" value={doctorInfo.shiftStart} />\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default AppointmentInformation;","import axios from 'axios';\r\n\r\nconst createMedicalAppointmentService = ({doctorId, shiftStart}, patientId, appointmentTime) => \r\n    axios.post(`http://localhost:3000/medicalAppointments`,{\r\n        id : uniqueID(),\r\n        doctorId : doctorId,\r\n        patientId : patientId,\r\n        Date : appointmentTime,\r\n        Time : shiftStart,\r\n        duration : 1 \r\n    })\r\n    .then(resp => {\r\n        console.log('resp.data',resp.data);\r\n        return Promise.resolve( resp.data)\r\n    }).catch(error => {\r\n        return Promise.reject(\"Error while trying to create a patient\", error)\r\n    });\r\n\r\n    const uniqueID =  () => {\r\n        return '_' + Math.random().toString(36).substr(2, 9);\r\n    };\r\n\r\nexport default createMedicalAppointmentService","import axios from 'axios';\r\n\r\nconst getAppointmentWithConditionsService = ( doctorID, AppointmentDate, AppointmentTime ) => \r\n    axios.get(`http://localhost:3000/medicalAppointments?doctorId=${doctorID}&Date=${AppointmentDate}&Time=${AppointmentTime}`)\r\n    .then(resp => {\r\n        return Promise.resolve( resp.data)\r\n    }).catch(error => {\r\n        return Promise.reject(\"Error while trying to get appointment\", error)\r\n    });\r\n\r\nexport default getAppointmentWithConditionsService","import React, { Component } from \"react\";\r\nimport {  NotificationManager} from 'react-notifications';\r\nimport Swal from 'sweetalert2'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport DoctorAvailability from './../components/DoctorAvailability'\r\nimport AppointmentInformation from './../components/AppointmentInformation'\r\nimport createMedicalAppointmentService from '../services/createMedicalAppointmentService'\r\nimport getAppointmentWithConditionsService from '../services/getAppointmentWithConditionsService'\r\nimport 'react-notifications/lib/notifications.css';\r\nimport './css/modalAndButton.css'\r\n\r\nexport default class ModalAndButton extends Component {\r\n    state = {\r\n      modalShow: false,\r\n      doctorAvailable : false,\r\n      showLabel : false,\r\n      appointmentDate : '',\r\n      showCreateAppointment : false\r\n    };\r\n    \r\n  handleShow = () =>{\r\n    this.setState({ modalShow: true })\r\n  }\r\n\r\n  handleClose = () =>{\r\n    this.setState({ modalShow: false })\r\n  }\r\n\r\n  handleSubmitCreateAppointment = async () => {\r\n    try{\r\n      console.log('resp.data');\r\n      const { appointmentDate } = this.state\r\n      const { doctorScheduleByRow, patientID } = this.props\r\n      const medicalAppointmentCreated = await createMedicalAppointmentService( \r\n                                        doctorScheduleByRow, patientID, appointmentDate)\r\n\r\n      if(medicalAppointmentCreated){\r\n        this.showMessage()\r\n      }else{\r\n        NotificationManager.error(\"There was a problem\")\r\n      }\r\n      this.handleClose()\r\n    }catch(error){\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  getDifferenceInDaysBetweenTodayAndAppointmentDate = (appointmentDateParam) =>{\r\n    const today = new Date()\r\n    const newAppointmentDateParamWithSpaces = appointmentDateParam.replace(/-/g, ' ');\r\n    const appointmentDate = new Date(newAppointmentDateParamWithSpaces)\r\n    let Difference_In_Time = appointmentDate.getTime() - today.getTime(); \r\n    let Difference_In_Days = Math.ceil(Difference_In_Time / (1000 * 3600 * 24));\r\n    return Difference_In_Days \r\n }\r\n\r\n  onChangeDate = (evt) =>{\r\n    this.setState({\r\n      appointmentDate: evt.target.value,  \r\n    },() =>{ this.checkDoctorAvailability()})\r\n    \r\n  }\r\n\r\n  showMessage = () =>{\r\n    return Swal.fire({\r\n      icon: 'success',\r\n      title: 'Your Medical Appointment was created',\r\n      showConfirmButton: false,\r\n      timer: 1500\r\n    })\r\n  }\r\n\r\n  checkDoctorAvailability = async () =>{\r\n    try{\r\n      const { appointmentDate } = this.state\r\n      const { doctorScheduleByRow  } = this.props\r\n      const Difference_In_Days = this.getDifferenceInDaysBetweenTodayAndAppointmentDate(\r\n                                      appointmentDate) \r\n      if(!isNaN( Difference_In_Days )){\r\n        if( Difference_In_Days < 0){\r\n          NotificationManager.error(\"Please enter a valid Date\")\r\n            this.setState({\r\n              appointmentDate: '',\r\n              showLabel : false  \r\n            })  \r\n        }else {\r\n          const existAppointment = await getAppointmentWithConditionsService(\r\n                                    doctorScheduleByRow.doctorId, \r\n                                    appointmentDate, \r\n                                    doctorScheduleByRow.shiftStart)\r\n          if(existAppointment.length === 0){\r\n            this.setState({\r\n              doctorAvailable : true,\r\n              showCreateAppointment : true\r\n            })\r\n          }else{\r\n            this.setState({\r\n              doctorAvailable : false,\r\n              showCreateAppointment : false\r\n            })\r\n          }\r\n          this.setState({\r\n            showLabel : true,\r\n          })\r\n        }\r\n      }  \r\n    }catch(err){\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  render() {\r\n  const show = (this.state.modalShow) ? true : false ;\r\n  const { doctorAvailable, \r\n    showLabel, \r\n    showCreateAppointment } = this.state\r\n\r\n  const { doctorScheduleByRow,\r\n    patientID,\r\n    patientInfo} = this.props\r\n\r\n  return (\r\n\r\n    <>\r\n    <button type=\"button\" className=\"btn btn-success\" variant=\"primary\" onClick={this.handleShow}>\r\n     +\r\n    </button>\r\n    <Modal   \r\n      show={show} \r\n      onHide={this.handleClose}>\r\n      <Modal.Header className={\"modal-header\"} closeButton>\r\n        <Modal.Title>Medical Appointment</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body className={\"modal-content\"}>\r\n          <div className=\"form-group\">\r\n            <AppointmentInformation \r\n              patientInfo={patientInfo}\r\n              patientID = {patientID}\r\n              doctorInfo = {doctorScheduleByRow} />\r\n            <label htmlFor=\"recipient-date\" \r\n              className=\"col-form-label\">\r\n              Enter Appointment's date:</label>\r\n            <input \r\n              className=\"form-control\"\r\n              type=\"date\"\r\n              defaultValue=\"19-08-2011\" \r\n              onChange={this.onChangeDate} \r\n              id=\"recipient-date\"></input>\r\n          </div>\r\n          <DoctorAvailability showLabel={showLabel} doctorAvailable={doctorAvailable } />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        { showCreateAppointment ? \r\n          <button \r\n            variant=\"primary\" \r\n            className=\"btn btn-primary\" \r\n            onClick={this.handleSubmitCreateAppointment}>\r\n          Create Appointment\r\n        </button> : <button variant=\"primary\" className=\"btn btn-primary\" disabled>\r\n                    Create Appointment\r\n                    </button>}\r\n        <button variant=\"secondary\" className=\"btn btn-danger\" onClick={this.handleClose}>\r\n          Close\r\n        </button>\r\n\r\n      </Modal.Footer>\r\n    </Modal>  \r\n  </>\r\n  );\r\n  }\r\n}","import React from 'react'\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport ModalAndButton from '../containers/ModalAndButton'\r\nimport './css/paginator.css'\r\n\r\nconst DoctorsScheduleTable = (props) => {\r\n  const { doctorSchedule, patientInfo, patientID } = props\r\n  const { SearchBar } = Search;\r\n    const columns = [\r\n      {\r\n        dataField: 'index',\r\n        text: '',\r\n        sort: true\r\n      },\r\n      {\r\n        dataField: 'specialty',\r\n        text: 'Specialty',\r\n        sort: true\r\n      },\r\n      {\r\n        dataField: 'name',\r\n        text: 'name',\r\n        sort: true\r\n      }, \r\n      {\r\n        dataField: 'lastname',\r\n        text: 'Lastname',\r\n        sort: true\r\n      }, \r\n      {\r\n        dataField: 'shiftStart',\r\n        text: 'Shift Start',\r\n        sort: true\r\n      }, \r\n      {\r\n        dataField: 'shiftEnd',\r\n        text: 'Shift End',\r\n        sort: true\r\n      }, \r\n      {\r\n        dataField: '',\r\n        text: 'Add Appointment',\r\n        sort: false,\r\n        formatter: ( rowContent, row, rowIndex ) => {\r\n            return (  \r\n            <div>   \r\n              <ModalAndButton \r\n                patientInfo = {patientInfo} \r\n                patientID = {patientID}\r\n                doctorScheduleByRow={doctorSchedule[rowIndex]}  />\r\n            </div> \r\n            )}\r\n      }\r\n    ];\r\n\r\n    const defaultSorted = [{\r\n      dataField: 'index',\r\n      order: 'asc'\r\n    }];\r\n\r\n    function customMatchFunc({\r\n      searchText,\r\n      value\r\n    }) {\r\n      if (typeof value !== 'undefined') {\r\n        return value.startsWith(searchText);\r\n      }\r\n      return false;\r\n    }  \r\n  \r\n  return (\r\n    <div className=\"container mt-4\">\r\n    <ToolkitProvider\r\n      keyField=\"index\"\r\n      data={ doctorSchedule }\r\n      columns={ columns }\r\n      search={ { customMatchFunc } }\r\n    >\r\n      {\r\n        props => (\r\n          <div>\r\n            <SearchBar \r\n            { ...props.searchProps }\r\n            placeholder=\"Enter search in table \"  />\r\n            <BootstrapTable bootstrap4 \r\n              { ...props.baseProps }\r\n              classes = \"table table-striped table-hover react-bs-table-tool-bar\"\r\n              keyField=\"index\"\r\n              data={  doctorSchedule  } \r\n              columns={ columns } \r\n              pagination={ paginationFactory() }\r\n              defaultSorted={ defaultSorted }  />\r\n          </div>\r\n        )\r\n      }\r\n    </ToolkitProvider>  \r\n  </div>\r\n  );\r\n}\r\n\r\nexport default DoctorsScheduleTable ;","import React from \"react\";\r\nimport logo from './../img/medicalAppointmentImage.jpg'; \r\nimport './css/backgroundImage.css'\r\n\r\nconst BackgroundImage = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <img className=\"maxWidth \" src={logo} alt=\"medical appointment logo\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BackgroundImage  ;","import axios from 'axios';\r\n\r\nconst getPatientByIdService = ( patientID ) => \r\n    axios.get(`http://localhost:3000/patients?patientID=${patientID}`)\r\n    .then(resp => {\r\n        return Promise.resolve( resp.data[0] )\r\n    }).catch(error => {\r\n        return Promise.reject(\"Error while trying to get patient's ID\", error)\r\n    });\r\n\r\n\r\nexport default getPatientByIdService","import axios from 'axios';\r\n\r\nconst getDoctorsSchedulePerHourService = ( ) => \r\n    axios.get(`http://localhost:3000/doctorSchedulePerHour?_expand=doctor`)\r\n    .then(resp => {\r\n        return Promise.resolve( resp.data)\r\n    }).catch(error => {\r\n        return Promise.reject(\"Error while trying to get Doctor's schedule\", error)\r\n    });\r\n\r\nexport default getDoctorsSchedulePerHourService","import React, { Component } from 'react'\r\nimport { NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport SearchButtonPerPatient  from \"../components/searchButtonPerPatient\"\r\nimport InformationOfThePatient from \"../components/InformationOfThePatient\"\r\nimport DoctorsScheduleTable from \"../components/DoctorsScheduleTable\"\r\nimport BackgroundImage from \"./../components/BackgroundImage\"\r\nimport getPatientByIdService from \"../services/getPatientByIdService\"\r\nimport getDoctorsSchedulePerHourService from \"../services/getDoctorsSchedulePerHourService\"\r\nimport 'react-notifications/lib/notifications.css';\r\n\r\nclass ScheduleMedicalAppointment extends Component {\r\n    state = {\r\n        patientID: '',\r\n        infoPatient: '',\r\n        showInformation : false,\r\n        doctorSchedulePerHour : []\r\n    }\r\n    \r\n    fetchInfoPatientAndDoctorSchedulePerHour = async (patientID) =>{\r\n        try{\r\n            const infoPatient = await getPatientByIdService(patientID)\r\n            if(typeof infoPatient === \"undefined\"){\r\n                NotificationManager.info(\"This patient ID was not found.\")\r\n                this.setState({\r\n                    showInformation : false\r\n                })\r\n            }else{\r\n                const doctorSchedulePerHour = await getDoctorsSchedulePerHourService()\r\n                if(doctorSchedulePerHour){\r\n                    const data = this.setAttributesForDataTable(doctorSchedulePerHour)  \r\n                    this.setState({\r\n                        infoPatient : infoPatient,\r\n                        showInformation : true,\r\n                        doctorSchedulePerHour : data\r\n                    })\r\n                }   \r\n            }\r\n        }catch(error){\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    setAttributesForDataTable = ( data ) => {\r\n        data.forEach(function (element, index) {\r\n            element.specialty = element.doctor.specialty;\r\n            element.lastname = element.doctor.lastname;\r\n            element.name = element.doctor.name;\r\n            element.index = index;\r\n            delete element.doctor\r\n        });\r\n        return data  \r\n    }\r\n\r\n    handleSubmitPatientId = () => {\r\n        const { patientID } = this.state\r\n        if( patientID === ''){\r\n            NotificationManager.error(\"Please enter a valid patient's ID\")\r\n            this.setState({\r\n                showInformation: false\r\n            })\r\n        }else{\r\n            this.setState({\r\n                patientID: patientID\r\n            }, () => {\r\n                this.fetchInfoPatientAndDoctorSchedulePerHour(this.state.patientID)\r\n            })\r\n        }   \r\n    }\r\n\r\n    handleOnKeyPressEnterPatientId= (evt) => {\r\n        const {patientID} = this.state\r\n        if ( evt.charCode === 13 ){\r\n            if( patientID === ''){\r\n                NotificationManager.error(\"Please enter a valid patient's ID\")\r\n                this.setState({\r\n                    showInformation: false\r\n                })\r\n            }else{\r\n                this.fetchInfoPatientAndDoctorSchedulePerHour(patientID)   \r\n            }     \r\n        }\r\n    }\r\n\r\n    onChangeInputPatientId = (evt) => {\r\n        this.setState({\r\n            patientID: evt.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { patientID, \r\n            showInformation,\r\n            infoPatient,\r\n            doctorSchedulePerHour} = this.state\r\n        return (\r\n            <div className=\"container-fluid col-xl-8\"  >\r\n                <div className = \"container mb-2 mt-4 text-center\">\r\n                  <h2>Schedule appointments</h2>\r\n                </div>\r\n                <div className = \"container mb-4\">\r\n                    <p className=\"lead mb-0\"> Instruction: </p>\r\n                    <small className=\"text-muted\">To create an appointment, first enter an ID of a registered patient.</small>\r\n                </div>\r\n                <SearchButtonPerPatient  \r\n                    patientId = { patientID } \r\n                    handleSubmitPatientId = { this.handleSubmitPatientId }\r\n                    onChangeInputPatientId = { this.onChangeInputPatientId }\r\n                    handleOnKeyPressEnterPatientId = { this.handleOnKeyPressEnterPatientId } />\r\n                <InformationOfThePatient\r\n                    show = {showInformation}\r\n                    info = {infoPatient}/>\r\n                <NotificationContainer/>\r\n                <hr />\r\n                { showInformation ? \r\n                  <>\r\n                  <div className = \"container mb-4 mt-4 text-center\">\r\n                    <h4> Doctors Schedule</h4>\r\n                  </div>\r\n                    <div className = \"container mb-4\">\r\n                     <p className=\"lead mb-0\"> Instruction: </p>\r\n                     <small className=\"text-muted\">Below is the schedule of available doctors, you can add in the column \"add appointment\".</small>\r\n                    </div>\r\n                  <DoctorsScheduleTable \r\n                    doctorSchedule = {doctorSchedulePerHour}\r\n                    patientID = {patientID} \r\n                    patientInfo={infoPatient}  />\r\n                  </> : <BackgroundImage />}   \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ScheduleMedicalAppointment;","import axios from 'axios';\r\n\r\nconst getDoctorsService = () => \r\n    axios.get(`http://localhost:3000/doctors`)\r\n    .then(resp => {\r\n        return Promise.resolve( resp.data)\r\n    }).catch(error => {\r\n        return Promise.reject(\"Error while trying to get Doctors\", error)\r\n    });\r\n\r\nexport default getDoctorsService","import React from \"react\";\r\n\r\nconst DoctorInformation = (props) => {\r\n\r\n  const { doctorId, specialty, doctorLastname } = props\r\n\r\n  return (\r\n    <div >\r\n      <div className=\"container mt-2\" >\r\n        <p> Doctor's Information:</p>\r\n        <div className=\"container border border-dark rounded \">\r\n        <form>\r\n          <div className=\"form-group mb-0  row\">\r\n            <label htmlFor=\"staticDoctorID\" className=\"col-sm-5 col-form-label\">Doctor's ID</label>\r\n            <div className=\"col-sm-6\">\r\n              <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticDoctorID\" value={doctorId} />\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group mb-0  row\">\r\n            <label htmlFor=\"staticDoctorName\" className=\"col-sm-5 col-form-label\">Doctor's lastname:</label>\r\n              <div className=\"col-sm-6\">\r\n                <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticDoctorName\" value={doctorLastname} />\r\n              </div>\r\n          </div>\r\n          <div className=\"form-group mb-0  row\">\r\n            <label htmlFor=\"staticDoctorSpecialty\" className=\"col-sm-5 col-form-label\">Doctor's specialty:</label>\r\n              <div className=\"col-sm-6\">\r\n                <input type=\"text\" readOnly className=\"form-control-plaintext\" id=\"staticDoctorSpecialty\" value={specialty} />\r\n              </div>\r\n          </div>\r\n        </form>\r\n        </div>\r\n     </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorInformation;","import React from \"react\";\r\n\r\nconst DoctorsDropdown = (props) => {\r\n  const { doctorId, doctors ,handleOnChangeSelect  } = props\r\n\r\n  return (\r\n    <div className=\"container\">\r\n       <form>\r\n        <div className = \"form-group mt-4\">\r\n          <select \r\n            className = \"custom-select\" \r\n            onChange = {handleOnChangeSelect}\r\n            value = {doctorId} >\r\n            <option key=\"placeholder\" value=\"\">Please select a doctor</option>\r\n              { doctors.map( (doctor, index) =>{\r\n                const fullName = doctor.name + '  ' + doctor.lastname\r\n                return <option key={index} value={doctor.id} > { fullName }</option>\r\n              })}\r\n          </select>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorsDropdown  ;","import React from 'react'\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport './css/paginator.css'\r\n\r\nconst DoctorAppointmentsTable = (props) => {\r\n  const { doctorAppointments } = props\r\n  const { SearchBar } = Search;\r\n    const columns = [\r\n      {\r\n        dataField: 'index',\r\n        text: '',\r\n        sort: true\r\n      },\r\n      {\r\n        dataField: 'patientId',\r\n        text: \"Patient's ID\",\r\n        sort: true\r\n      }, \r\n      {\r\n        dataField: 'Date',\r\n        text: \"Appointment's Date\",\r\n        sort: true\r\n      }, \r\n      {\r\n        dataField: \"Time\",\r\n        text: \"Appointment Time\",\r\n        sort: true\r\n      }, \r\n      {\r\n        dataField: 'duration',\r\n        text: 'Duration',\r\n        sort: true\r\n      }\r\n    ];\r\n\r\n    const defaultSorted = [{\r\n      dataField: 'index',\r\n      order: 'asc'\r\n    }];\r\n\r\n    function customMatchFunc({\r\n      searchText,\r\n      value,\r\n      row\r\n    }) {\r\n      if (typeof value !== 'undefined' ) {\r\n        return value.startsWith(searchText)  ;\r\n      }\r\n      return false;\r\n    }  \r\n  \r\n  return (\r\n    <div className=\"container mt-6\">\r\n    <ToolkitProvider\r\n      keyField=\"index\"\r\n      data={ doctorAppointments }\r\n      columns={ columns }\r\n      search={ { customMatchFunc}  }\r\n    >\r\n      {\r\n        props => (\r\n          <div>\r\n            <SearchBar \r\n            { ...props.searchProps }\r\n            placeholder=\"Enter search in table\"  />\r\n            <BootstrapTable bootstrap4 \r\n              { ...props.baseProps }\r\n              classes = \"table table-striped table-hover react-bs-table-tool-bar\"\r\n              keyField=\"index\"\r\n              data={ doctorAppointments } \r\n              columns={ columns } \r\n              pagination={ paginationFactory() }\r\n              defaultSorted={ defaultSorted }  />\r\n          </div>\r\n        )\r\n      }\r\n    </ToolkitProvider>  \r\n  </div>\r\n  );\r\n}\r\n\r\nexport default DoctorAppointmentsTable ;","import axios from 'axios';\r\n\r\nconst getDoctorByIDService = ( doctorID ) => \r\n    axios.get(`http://localhost:3000/doctors?id=${doctorID}`)\r\n    .then(resp => {\r\n        return Promise.resolve( resp.data[0])\r\n    }).catch(error => {\r\n        return Promise.reject(\"Error while trying to get doctor\", error)\r\n    });\r\n\r\nexport default getDoctorByIDService","import axios from 'axios';\r\n\r\nconst getAppointmentsByDoctorIDService = ( doctorID ) => \r\n    axios.get(`http://localhost:3000/doctors?id=${doctorID}&_embed=medicalAppointments`)\r\n    .then(resp => {\r\n        return Promise.resolve( resp.data[0].medicalAppointments)\r\n    }).catch(error => {\r\n        return Promise.reject(\"Error while trying to get Doctor's Appointments\", error)\r\n    });\r\n\r\nexport default getAppointmentsByDoctorIDService","import React, { Component } from 'react'\r\nimport getDoctorsService from './../services/getDoctorsService'\r\nimport DoctorInformation from './../components/DoctorInformation'\r\nimport DoctorsDropdown from './../components/DoctorsDropdown'\r\nimport DoctorAppointmentsTable from './../components/DoctorAppointmentsTable'\r\nimport BackgroundImage from \"./../components/BackgroundImage\"\r\nimport getDoctorByIDService from './../services/getDoctorByIDService'\r\nimport getAppointmentsByDoctorIDService from './../services/getAppointmentsByDoctorIDService'\r\n\r\nclass MedicalSchedulePerDoctor extends Component {\r\n    state = {\r\n        doctorId: '',\r\n        doctorInfo:'',\r\n        doctors: [],\r\n        doctorAppointments: [],\r\n        showDoctorInformation : false\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchDoctors()\r\n    }\r\n\r\n    fetchDoctors = async () =>{\r\n        try{\r\n            const doctors = await getDoctorsService()\r\n            if( doctors ){\r\n                this.setState({\r\n                    doctors: doctors\r\n                })\r\n            }\r\n        }catch( err ){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    fetchDoctorData = async () =>{\r\n        try{\r\n            const { doctorId } = this.state\r\n            if( doctorId !== ''){\r\n                const doctorInfo = await getDoctorByIDService(doctorId)\r\n                const doctorAppointments = await getAppointmentsByDoctorIDService(doctorId)\r\n                const doctorAppointmentsUpdate = this.setAttributesForDataTable(doctorAppointments )\r\n                if( doctorInfo && doctorAppointmentsUpdate ){\r\n                    this.setState({\r\n                        doctorInfo: doctorInfo,\r\n                        showDoctorInformation: true,\r\n                        doctorAppointments: doctorAppointmentsUpdate\r\n                    })\r\n                }\r\n            }\r\n        }catch( error ){\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    setAttributesForDataTable = ( data ) => {\r\n        data.forEach( (element, index) => {\r\n            element.index = index; \r\n            element.duration = element.duration + ' hour' \r\n        });\r\n        return data  \r\n    }\r\n\r\n    handleOnChangeSelect = (evt) =>{\r\n        if( evt.target.value === ''){\r\n            this.setState({\r\n                showDoctorInformation:false\r\n            })\r\n        }\r\n        this.setState({\r\n            doctorId: evt.target.value\r\n        }, () =>{ this.fetchDoctorData()})\r\n    }\r\n\r\n    render() {\r\n        const { doctorId,\r\n                doctorInfo,\r\n                doctors,\r\n                showDoctorInformation,\r\n                doctorAppointments} = this.state\r\n        return (\r\n            <div className=\"container-fluid col-xl-8\">\r\n                <div className = \"container mb-2 mt-4 text-center\">\r\n                  <h2>Medical's Schedule Per doctor</h2>\r\n                </div>\r\n                <div className = \"container mb-4\">\r\n                    <p className=\"lead mb-0\"> Instruction: </p>\r\n                    <small className=\"text-muted\">To view a doctor's schedule, first select a doctor.</small>\r\n                </div>\r\n                <DoctorsDropdown \r\n                    doctorId={doctorId}\r\n                    doctors={doctors} \r\n                    handleOnChangeSelect={this.handleOnChangeSelect } />\r\n               <hr />\r\n               { showDoctorInformation ? \r\n                <>\r\n                <DoctorInformation \r\n                    doctorId={doctorInfo.id} \r\n                    specialty={doctorInfo.specialty} \r\n                    doctorLastname={doctorInfo.lastname}/>\r\n                <hr />\r\n                <div className = \"container mb-4 mt-4 text-center\">\r\n                    <h4> Pending Medical Appointments </h4>\r\n                </div>\r\n                <DoctorAppointmentsTable\r\n                 doctorAppointments={doctorAppointments} />\r\n                </>: <BackgroundImage /> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default MedicalSchedulePerDoctor;","let validations = {\r\n    regexs: {\r\n        IDNumber: /[0-9]{13,}$/,\r\n        ageNumber : /[0-9]{1,}$/,\r\n        string : /[A-Za-zÁÉÍÓÚÑáéíóúñ +,.’'-]{2,}$/\r\n    }\r\n}\r\nexport default validations;","import axios from 'axios';\r\n\r\nconst createMedicalAppointmentService = ( ID, name, lastname, age) => \r\n    axios.post(`http://localhost:3000/patients`,{\r\n        id: uniqueID(),\r\n        patientID: ID,\r\n        name: name,\r\n        lastname: lastname,\r\n        age: Number(age)\r\n    })\r\n    .then(resp => {\r\n        console.log('resp', resp);\r\n        return Promise.resolve( resp.data)\r\n    }).catch(error => {\r\n        console.log('error', error);\r\n        return Promise.reject(\"Error while trying to create a patient\", error)\r\n    });\r\n\r\n    const uniqueID =  () => {\r\n        return '_' + Math.random().toString(36).substr(2, 9);\r\n    };\r\n\r\nexport default createMedicalAppointmentService","import React, { Component } from \"react\";\r\nimport { isEmpty } from 'lodash'\r\nimport validations from '../utils/userValidations'\r\nimport { NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport createPatientService from './../services/createPatientService'\r\nimport getPatientByIdService from './../services/getPatientByIdService'\r\nimport './css/registerPatient.css'\r\n\r\nexport default class RegisterPatient extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        ID : '',\r\n        name : '',\r\n        lastname : '',\r\n        age : '',\r\n      error: {\r\n        ID : '',\r\n        name : '',\r\n        lastname : ''\r\n      }\r\n    };\r\n    this.myRef = React.createRef();\r\n  }\r\n    \r\n  componentDidMount(){\r\n    this.myRef.current.focus();\r\n  }\r\n\r\n    handleSubmitCreatePatient = async () =>{\r\n        this.validateRequiredInput()\r\n        const {ID, name, lastname, age, error} = this.state\r\n        if( isEmpty(error.ID) \r\n            && isEmpty(error.name) \r\n            && isEmpty(error.lastname) \r\n            && isEmpty(error.age)){\r\n            const isPatientExist = await getPatientByIdService(ID)\r\n            if( isEmpty(isPatientExist)){\r\n                const patientCreated = await createPatientService(ID, name, lastname, age)\r\n                if( patientCreated ){\r\n                    NotificationManager.success(\"Patient Created!!!\")\r\n                    this.cleanInput()\r\n                }\r\n            }else {\r\n                NotificationManager.error(\"This patient's ID is already exist. Please enter other ID\")\r\n            }    \r\n        }\r\n    }\r\n\r\n    handleOnClose = () =>{\r\n      this.setState({\r\n        error:{\r\n          ID: '',\r\n          name: '',\r\n          lastname: '',\r\n          age: ''\r\n        }\r\n      })\r\n      this.cleanInput()\r\n    }\r\n\r\n    cleanInput = ()=>{\r\n        this.setState({\r\n            ID: '',\r\n            name: '',\r\n            lastname: '',\r\n            age: ''\r\n        })\r\n    }\r\n\r\n    validateRequiredInput = () =>{\r\n        const { ID, name, lastname, age} = this.state\r\n        let errors = this.state.error   \r\n\r\n        isEmpty(ID) ? errors.ID = \"* This field is required\" : errors.ID = ''\r\n        isEmpty(name) ? errors.name = \"* This field is required\" : errors.ID = ''\r\n        isEmpty(lastname) ? errors.lastname = \"* This field is required\" : errors.ID = ''\r\n        isEmpty(age) ? errors.age = \"* This field is required\" : errors.ID = ''\r\n        \r\n        this.setState({\r\n            error: errors\r\n        })\r\n    }\r\n\r\n  handleOnChangePatientInfo = (id, e) =>{\r\n\r\n    let { error } = this.state\r\n    let value = e.target.value;\r\n    \r\n    switch (id) {\r\n        case 'ID':\r\n          const validateIDNumber = validations.regexs.IDNumber.test(value)\r\n          if(!validateIDNumber){\r\n            error.ID = \"*In this field is only numbers allowed. Example: 0801170012345\"\r\n          }else{\r\n            error.ID = ''\r\n          }\r\n          break;\r\n        case 'name':\r\n            const validateNameString = validations.regexs.string.test(value)\r\n            if(!validateNameString){\r\n              error.name = \"*In this field is only string allowed. Example: some name\"\r\n            }else{\r\n                error.name = ''\r\n              }\r\n          break;\r\n        case 'lastname':\r\n            const validateLastnameString = validations.regexs.string.test(value)\r\n            if(!validateLastnameString){\r\n              error.lastname = \"*In this field is only string allowed. Example: some lastname\"\r\n            }else{\r\n                error.lastname = ''\r\n              }\r\n          break;\r\n        case 'age':\r\n            const validateAgeNumber = validations.regexs.ageNumber.test(value)\r\n            const ageNumber = Number(value)\r\n            if(!validateAgeNumber){\r\n              error.age = \"*In this field is only numbers allowed. Example: 20\"\r\n            }else if(ageNumber< 0 || ageNumber > 120){\r\n                    error.age = '*Please enter a valid age'\r\n                }else{\r\n                    error.age = ''\r\n                }\r\n          break;\r\n          default:\r\n            console.log('');\r\n      }\r\n    \r\n    this.setState({\r\n        [id]: value,\r\n        error, \r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n  const { ID, name, lastname, age, error} = this.state\r\n\r\n  return (\r\n\r\n    <div className=\"container-fluid col-xl-8\" >\r\n      <div className=\"container mt-2 mb-4\" >\r\n        <h2 className=\"mb-4\"> Patient's Register</h2>\r\n        <div className=\"container border border-dark rounded \">\r\n        <form className=\"mb-4\">\r\n            <div className=\"form-group\">\r\n            <label className=\"mt-2\" htmlFor=\"ID\">Patient's ID: </label>\r\n            <input type=\"text\" \r\n                className=\"form-control\" \r\n                onChange={this.handleOnChangePatientInfo.bind(this, 'ID')} \r\n                value={ID} \r\n                id=\"ID\"  \r\n                placeholder=\"Enter Patient's ID\"\r\n                ref={this.myRef} />\r\n            <small  id=\"IDError\" \r\n                className=\"form-text smallCustomize\">{error.ID}</small>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"name\">Patient's name: </label>\r\n                <input type=\"text\" \r\n                    className=\"form-control\" \r\n                    onChange={this.handleOnChangePatientInfo.bind(this, 'name')} \r\n                    value={name} \r\n                    id=\"name\"  \r\n                    placeholder=\"Enter Patient's name\" />\r\n                <small id=\"IDName\" \r\n                    className=\"form-text smallCustomize\">{error.name}</small>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"lastname\">Patient's lastname: </label>\r\n                <input type=\"text\" \r\n                    className=\"form-control\" \r\n                    onChange={this.handleOnChangePatientInfo.bind(this, 'lastname')} \r\n                    value={lastname} \r\n                    id=\"lastname\"  \r\n                    placeholder=\"Enter Patient's lastname\" />\r\n                <small id=\"lastnameError\" \r\n                    className=\"form-text smallCustomize\">{error.lastname}</small>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"age\">Patient's age: </label>\r\n                <input type=\"text\" \r\n                    className=\"form-control\" \r\n                    onChange={this.handleOnChangePatientInfo.bind(this, 'age')} \r\n                    value={age} \r\n                    id=\"age\"  \r\n                    placeholder=\"Enter Patient's age\"\r\n                    max=\"100\"\r\n                    min=\"0\" />\r\n            <small id=\"ageError\" \r\n                className=\"form-text smallCustomize\">{error.age}</small>\r\n            </div>\r\n            <div className=\"text-center mt-2 \">\r\n                <button \r\n                    className=\"btn btn-success\" \r\n                    type=\"button\" \r\n                    onClick={this.handleSubmitCreatePatient} > Create Patient</button>\r\n                <button \r\n                    className=\"btn btn-danger ml-2 \" \r\n                    type=\"button\" \r\n                    onClick={this.handleOnClose} > Cancel</button>\r\n            </div>\r\n        </form>\r\n        </div>\r\n      </div>\r\n      <NotificationContainer/>\r\n    </div>  );}\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from \"./containers/Navbar\"\nimport ScheduleMedicalAppointment from \"./containers/ScheduleMedicalAppointment\"\nimport MedicalSchedulePerDoctor from \"./containers/MedicalSchedulePerDoctor\"\nimport RegisterPatient from \"./containers/registerPatient\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n        <div>\n          <div className=\"App\">\n            <Navbar></Navbar>\n          </div>\n          <Switch>\n            <Route exact path='/' component={ScheduleMedicalAppointment} />\n            <Route path='/doctors' component={MedicalSchedulePerDoctor} />\n            <Route path='/patients' component={RegisterPatient} />\n          </Switch>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/appointment.cc359dd2.svg\";","module.exports = __webpack_public_path__ + \"static/media/medicalAppointmentImage.d497eb8f.jpg\";"],"sourceRoot":""}